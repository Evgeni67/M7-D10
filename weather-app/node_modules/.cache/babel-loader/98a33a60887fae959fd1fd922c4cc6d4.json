{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\Desktop\\\\M7-D10\\\\M7-D10\\\\weather-app\\\\src\\\\components\\\\searchEngine.jsx\";\nimport React, { Component } from \"react\";\nimport { Row, Col, Button, Container } from \"react-bootstrap\";\nimport \"./searchEngine.css\";\nimport { connect } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst mapStateToProps = state => state;\n\nconst mapDispatchToProps = dispatch => ({\n  changeWeather: city => dispatch(async (dispatch, getState) => {\n    try {\n      let response = await fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=1a944dea54d850b601ad666177b6deb2`, {\n        method: \"GET\"\n      });\n      let data = await response.json();\n      console.log(data);\n      let weather = data;\n      console.log(weather);\n      dispatch({\n        type: \"CHANGE_CURRENT_WEATHER_LOCATION\",\n        payload: weather\n      });\n    } catch (e) {\n      console.log(\"Fetching is not ok\", e);\n    }\n  }),\n  loaded: () => {\n    dispatch({\n      type: \"LOADED\"\n    });\n  },\n  notLoaded: () => {\n    dispatch({\n      type: \"NOT_LOADED\"\n    });\n  }\n});\n\nclass SearchEngine extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.dynamicTyping = e => {\n      this.setState({\n        textForSearch: e.currentTarget.value\n      });\n    };\n\n    this.state = {\n      textForSearch: \"\"\n    };\n\n    this.changeWeatherLoading = async () => {\n      await this.props.changeWeather(this.state.textForSearch);\n      this.props.notLooaded();\n      this.props.loaded();\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        className: \"mainSearchRow\",\n        children: [/*#__PURE__*/_jsxDEV(Row, {\n          className: \"d-flex justify-content-center\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"searchImage\",\n            src: \"http://cdn.lowgif.com/full/24649d3b53e7a0ff-.gif\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          className: \"inputRow d-flex justify-content-center mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"inputForm\",\n            placeholder: \"   Location\",\n            onChange: e => this.dynamicTyping(e)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => this.changeWeatherLoading(),\n            children: \"Search\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 7\n      }, this)\n    }, void 0, false);\n  }\n\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchEngine);","map":{"version":3,"sources":["C:/Users/Dell/Desktop/M7-D10/M7-D10/weather-app/src/components/searchEngine.jsx"],"names":["React","Component","Row","Col","Button","Container","connect","mapStateToProps","state","mapDispatchToProps","dispatch","changeWeather","city","getState","response","fetch","method","data","json","console","log","weather","type","payload","e","loaded","notLoaded","SearchEngine","dynamicTyping","setState","textForSearch","currentTarget","value","changeWeatherLoading","props","notLooaded","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Row, Col, Button, Container } from \"react-bootstrap\";\r\nimport \"./searchEngine.css\";\r\nimport { connect } from \"react-redux\";\r\nconst mapStateToProps = (state) => state;\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  changeWeather: (city) =>\r\n    dispatch(async (dispatch, getState) => {\r\n      try {\r\n        let response = await fetch(\r\n          `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=1a944dea54d850b601ad666177b6deb2`,\r\n          {\r\n            method: \"GET\",\r\n          }\r\n        );\r\n\r\n        let data = await response.json();\r\n        console.log(data);\r\n        let weather = data;\r\n        console.log(weather);\r\n        dispatch({\r\n          type: \"CHANGE_CURRENT_WEATHER_LOCATION\",\r\n          payload: weather,\r\n        });\r\n      } catch (e) {\r\n        console.log(\"Fetching is not ok\", e);\r\n      }\r\n    }),\r\n    loaded:() => {\r\n      dispatch({\r\n        type: \"LOADED\",\r\n      });\r\n    }, notLoaded:() => {\r\n      dispatch({\r\n        type: \"NOT_LOADED\",\r\n      });\r\n    }\r\n});\r\nclass SearchEngine extends Component {\r\n  dynamicTyping = (e) => {\r\n    this.setState({textForSearch:e.currentTarget.value})\r\n  };\r\n  state = {\r\n    textForSearch: \"\",\r\n  };\r\n  changeWeatherLoading = async() => {\r\n    await this.props.changeWeather(this.state.textForSearch)\r\n    this.props.notLooaded();\r\n    this.props.loaded();\r\n  }\r\n  render() {\r\n    return (\r\n      <>\r\n      <Container className =\"mainSearchRow\">\r\n        <Row className=\"d-flex justify-content-center\">\r\n          <img className =\"searchImage\" src=\"http://cdn.lowgif.com/full/24649d3b53e7a0ff-.gif\" />\r\n        </Row>\r\n        <Row className=\"inputRow d-flex justify-content-center mb-4\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"inputForm\"\r\n            placeholder=\"   Location\"\r\n            onChange={(e) => this.dynamicTyping(e)}\r\n          ></input>\r\n          <Button\r\n            onClick={() =>  this.changeWeatherLoading()}\r\n          >\r\n            Search\r\n          </Button>\r\n        </Row>\r\n        </Container>\r\n      </>\r\n    );\r\n  }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchEngine);\r\n"]},"metadata":{},"sourceType":"module"}