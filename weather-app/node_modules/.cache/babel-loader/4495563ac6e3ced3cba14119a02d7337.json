{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\Desktop\\\\M7-D10\\\\M7-D10\\\\weather-app\\\\src\\\\components\\\\searchEngine.jsx\";\nimport React, { Component } from \"react\";\nimport { Row, Col, Button, Container } from \"react-bootstrap\";\nimport \"./searchEngine.css\";\nimport { connect } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst mapStateToProps = state => state;\n\nconst mapDispatchToProps = dispatch => ({\n  changeWeather: city => dispatch(async (dispatch, getState) => {\n    try {\n      let response = await fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=1a944dea54d850b601ad666177b6deb2`, {\n        method: \"GET\"\n      });\n      let data = await response.json();\n      console.log(data);\n      let weather = data;\n      console.log(weather);\n      dispatch({\n        type: \"CHANGE_CURRENT_WEATHER_LOCATION\",\n        payload: weather\n      });\n    } catch (e) {\n      console.log(\"Fetching is not ok\", e);\n    }\n  }),\n  loaded: () => {\n    dispatch({\n      type: \"LOADED\"\n    });\n  },\n  notLoaded: () => {\n    dispatch({\n      type: \"NOT_LOADED\"\n    });\n  },\n  invalidCity: () => {\n    dispatch({\n      type: \"INVALID_CITY\"\n    });\n  },\n  validCity: () => {\n    dispatch({\n      type: \"VALID_CITY\"\n    });\n  },\n  startLoading: () => {\n    dispatch({\n      type: \"START_LOADING\"\n    });\n  },\n  stopLoading: () => {\n    dispatch({\n      type: \"STOP_LOADING\"\n    });\n  }\n});\n\nclass SearchEngine extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.dynamicTyping = e => {\n      this.setState({\n        textForSearch: e.currentTarget.value\n      });\n    };\n\n    this.state = {\n      textForSearch: \"\"\n    };\n\n    this.changeWeatherLoading = async () => {\n      this.props.startLoading();\n      await this.props.changeWeather(this.state.textForSearch);\n      this.props.notLoaded();\n\n      if (!this.props.currentWeather.weather.message) {\n        this.props.loaded();\n        this.props.validCity();\n        this.props.stopLoading();\n      } else {\n        this.props.invalidCity();\n        this.props.stopLoading();\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        className: \"mainSearchRow\",\n        children: [/*#__PURE__*/_jsxDEV(Row, {\n          className: \"d-flex justify-content-center\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"searchImage\",\n            src: \"http://cdn.lowgif.com/full/24649d3b53e7a0ff-.gif\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          className: \"inputRow d-flex justify-content-center mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"inputForm\",\n            placeholder: \"   Location\",\n            onChange: e => this.dynamicTyping(e)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => this.changeWeatherLoading(),\n            children: \"Search\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchEngine);","map":{"version":3,"sources":["C:/Users/Dell/Desktop/M7-D10/M7-D10/weather-app/src/components/searchEngine.jsx"],"names":["React","Component","Row","Col","Button","Container","connect","mapStateToProps","state","mapDispatchToProps","dispatch","changeWeather","city","getState","response","fetch","method","data","json","console","log","weather","type","payload","e","loaded","notLoaded","invalidCity","validCity","startLoading","stopLoading","SearchEngine","dynamicTyping","setState","textForSearch","currentTarget","value","changeWeatherLoading","props","currentWeather","message","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Row, Col, Button, Container } from \"react-bootstrap\";\r\nimport \"./searchEngine.css\";\r\nimport { connect } from \"react-redux\";\r\nconst mapStateToProps = (state) => state;\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  changeWeather: (city) =>\r\n    dispatch(async (dispatch, getState) => {\r\n      try {\r\n        let response = await fetch(\r\n          `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=1a944dea54d850b601ad666177b6deb2`,\r\n          {\r\n            method: \"GET\",\r\n          }\r\n        );\r\n\r\n        let data = await response.json();\r\n        console.log(data);\r\n        let weather = data;\r\n        console.log(weather);\r\n        dispatch({\r\n          type: \"CHANGE_CURRENT_WEATHER_LOCATION\",\r\n          payload: weather,\r\n        });\r\n      } catch (e) {\r\n        console.log(\"Fetching is not ok\", e);\r\n      }\r\n    }),\r\n  loaded: () => {\r\n    dispatch({\r\n      type: \"LOADED\",\r\n    });\r\n  },\r\n  notLoaded: () => {\r\n    dispatch({\r\n      type: \"NOT_LOADED\",\r\n    });\r\n  },\r\n  invalidCity: () => {\r\n    dispatch({\r\n      type: \"INVALID_CITY\",\r\n    });\r\n  },\r\n  validCity: () => {\r\n    dispatch({\r\n      type: \"VALID_CITY\",\r\n    });\r\n  },\r\n  startLoading: () => {\r\n    dispatch({\r\n      type: \"START_LOADING\",\r\n    });\r\n  },\r\n  stopLoading: () => {\r\n    dispatch({\r\n      type: \"STOP_LOADING\",\r\n    });\r\n  },\r\n});\r\nclass SearchEngine extends Component {\r\n  dynamicTyping = (e) => {\r\n    this.setState({ textForSearch: e.currentTarget.value });\r\n  };\r\n  state = {\r\n    textForSearch: \"\",\r\n  };\r\n  changeWeatherLoading = async () => {\r\nthis.props.startLoading()\r\n    await this.props.changeWeather(this.state.textForSearch);\r\n    this.props.notLoaded();\r\n    if (!this.props.currentWeather.weather.message) {\r\n      this.props.loaded();\r\n      this.props.validCity()\r\n      this.props.stopLoading();\r\n    } else {\r\n      this.props.invalidCity();\r\n      this.props.stopLoading();\r\n    }\r\n  };\r\n  render() {\r\n    return (\r\n      <>\r\n        <Container className=\"mainSearchRow\">\r\n          <Row className=\"d-flex justify-content-center\">\r\n            <img\r\n              className=\"searchImage\"\r\n              src=\"http://cdn.lowgif.com/full/24649d3b53e7a0ff-.gif\"\r\n            />\r\n          </Row>\r\n          <Row className=\"inputRow d-flex justify-content-center mb-4\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"inputForm\"\r\n              placeholder=\"   Location\"\r\n              onChange={(e) => this.dynamicTyping(e)}\r\n            ></input>\r\n            <Button onClick={() => this.changeWeatherLoading()}>Search</Button>\r\n          </Row>\r\n        </Container>\r\n      </>\r\n    );\r\n  }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchEngine);\r\n"]},"metadata":{},"sourceType":"module"}